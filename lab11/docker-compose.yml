services:
  receiver:
    build:
      context: receiver
      dockerfile: Dockerfile
    volumes:
      - ./_config/receiver_config.yml:/app/config/receiver_config.yml
      - ./_config/logging_config.yml:/app/config/logging_config.yml
      - ./_logs/receiver.log:/app/logs/app.log
    environment:
      - TZ
    ports:
      - 8080:8080
  storage:
    build:
      context: storage
      dockerfile: Dockerfile
    volumes:
      - ./_config/storage_config.yml:/app/config/storage_config.yml
      - ./_config/logging_config.yml:/app/config/logging_config.yml
      - ./_logs/storage.log:/app/logs/app.log
    environment:
      - TZ
    ports:
      - 8090:8090
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
  processing:
    build:
      context: processing
      dockerfile: Dockerfile
    volumes:
      - ./_config/processing_config.yml:/app/config/processing_config.yml
      - ./_config/logging_config.yml:/app/config/logging_config.yml
      - ./_logs/processing.log:/app/logs/app.log
      - ./_data/processing:/app/data/processing
    environment:
      - TZ
    ports:
      - 8100:8100
  analyzer:
    build:
      context: analyzer
      dockerfile: Dockerfile
    volumes:
      - ./_config/analyzer_config.yml:/app/config/analyzer_config.yml
      - ./_config/logging_config.yml:/app/config/logging_config.yml
      - ./_logs/analyzer.log:/app/logs/app.log
    environment:
      - TZ
    ports:
      - 8110:8110
  dashboard:
    build:
      context: dashboard
      dockerfile: Dockerfile
    ports:
      - 80:80
    environment:
      - TZ
    depends_on:
      - receiver
      - storage
      - processing
      - analyzer
  zookeeper:
    image: wurstmeister/zookeeper
    volumes:
      - zookeeper_data:/data
  kafka:
    image: wurstmeister/kafka
    hostname: kafka
    command: >
      sh -c "rm -f ./kafka/kafka-logs-kafka/meta.properties && start-kafka.sh"
    ports:
      - 9092:9092
    environment:
      - KAFKA_BROKER_ID
      - KAFKA_CREATE_TOPICS              # topic_name:partition_num:replicas_num
      - KAFKA_ADVERTISED_HOST_NAME
      - KAFKA_LISTENERS
      - KAFKA_INTER_BROKER_LISTENER_NAME
      - KAFKA_ADVERTISED_LISTENERS
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP
      - KAFKA_ZOOKEEPER_CONNECT
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR   # required if running single node cluster
    volumes:
      # - /var/run/docker.sock:/var/run/docker.sock     # allow running docker inside Kafak â†’ probably not needed
      - ./_data/kafka:/kafka
    depends_on:
      - zookeeper
  db:
    image: mysql
    environment:
      - MYSQL_RANDOM_ROOT_PASSWORD
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DATABASE
      - TZ
    healthcheck:
      test: ["CMD", "mysql", "-u", "riot", "-priot", "-e", "USE riot"]
      interval: 10s
      retries: 5  
      start_period: 30s
      timeout: 10s
    ports:
      - 3306:3306
    volumes:
      # - my-db:/var/lib/mysql              # persistent data
      - ./_data/database:/var/lib/mysql

volumes:
  zookeeper_data:                           # volume for data persistence